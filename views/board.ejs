<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Board</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <style>
        body {
            background-color: white !important;
        }

        .link-item {
            display: flex;
            align-items: center;
            position: relative;
        }

        .link-item::before {
            content: '\f111';
            font-family: FontAwesome;
            margin-right: 10px;
            color: green;
        }

        .link-item a {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 80%;
            text-decoration: none;
            color: black;
        }

        .link-item a.full {
            white-space: normal;
            overflow: visible;
        }

        .link-divider {
            height: 2px;
            background-color: #ccc;
        }

        h5.link-divider {
            font-size: 1.25rem;
            color: #333;
            border-bottom-width: 2px;
        }

        .container-custom {
            max-width: 900px;
            margin: 0 auto;
        }

        /* Loader styling */
        #loader {
            border: 16px solid #f3f3f3;
            border-radius: 50%;
            border-top: 16px solid #3498db;
            width: 120px;
            height: 120px;
            animation: spin 2s linear infinite;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            display: none;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        /* Error message styling */
        #error-message {
            color: red;
            text-align: center;
            display: none;
            margin-top: 20px;
        }
    </style>
</head>

<body>
    <%- include('nav') %>

        <div class="container container-custom mt-5">
            <div class="breadcrumbs" style="display: flex; align-items: center; background-color: #f4f4f4; padding: 4px;">
                <ul style="list-style: none; display: flex; margin: 0; padding: 0;">
                    <li style="margin-right: 5px;">
                        <a href="/" style="text-decoration: none; color: #000;">Home</a>
                        <i class="fa fa-angle-right" style="margin-left: 5px; margin-right: 5px;"></i>
                    </li>
                    <li>
                        <a href="/board" style="text-decoration: none; color: #000;">Board</a>
                    </li>
                </ul>
            </div>
            <div id="loader"></div> <!-- Loader -->
            <div id="error-message">Error loading data. Please try again later.</div> <!-- Error message -->
            <div id="links-container" class="row">
                <!-- The data will be dynamically populated here -->
            </div>
        </div>

        <script>
            document.addEventListener('DOMContentLoaded', async () => {
                const loader = document.getElementById('loader');
                const errorMessage = document.getElementById('error-message');
                const linksContainer = document.getElementById('links-container');

                try {
                    loader.style.display = 'block'; // Show the loader

                    const response = await fetch('/getboard');
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    const data = await response.json();

                    const languageMap = {};

                    const flagMap = {
                        "English": "🇬🇧",
                        "German": "🇩🇪",
                        "Russian": "🇷🇺",
                        "Albanian": "🇦🇱",
                        "Arabic": "🇸🇦",
                        "Azerbaijan": "🇦🇿",
                        "Chinese": "🇨🇳",
                        "Croatia": "🇭🇷",
                        "Czech": "🇨🇿",
                        "Danish": "🇩🇰",
                        "Dutch": "🇳🇱",
                        "French": "🇫🇷",
                        "Georgian": "🇬🇪",
                        "Greek": "🇬🇷",
                        "Indonesian": "🇮🇩",
                        "Italian": "🇮🇹",
                        "Japanese": "🇯🇵",
                        "Malaysian": "🇲🇾",
                        "Persian": "🇮🇷",
                        "Polish": "🇵🇱",
                        "Portuguese": "🇵🇹",
                        "Romanian": "🇷🇴",
                        "Serbian": "🇷🇸",
                        "Spanish": "🇪🇸",
                        "Thai": "🇹🇭",
                        "Turkish": "🇹🇷",
                        "Ukrainian": "🇺🇦",
                        "Uzbek": "🇺🇿",
                        "Vietnamese": "🇻🇳",
                        "N/A": "❓"
                    };

                    data.boardsdata.forEach(blog => {
                        const languageOption = blog.languageOption;
                        const flag = flagMap[languageOption] || "";

                        if (!languageMap[languageOption]) {
                            const colDiv = document.createElement('div');
                            colDiv.className = 'col-12 col-md-6 col-lg-3';

                            const h5Tag = document.createElement('h5');
                            h5Tag.textContent = `${languageOption} ${flag}`;
                            h5Tag.style.fontWeight = '600';

                            const linksDiv = document.createElement('div');
                            linksDiv.className = 'links';

                            colDiv.appendChild(h5Tag);
                            colDiv.appendChild(linksDiv);
                            linksContainer.appendChild(colDiv);

                            languageMap[languageOption] = linksDiv;
                        }

                        const linkItem = document.createElement('div');
                        linkItem.className = 'link-item';

                        const link = document.createElement('a');
                        link.href = blog.domain;
                        link.target = '_blank';
                        link.textContent = blog.domainName;
                        link.title = blog.domain;

                        link.addEventListener('click', (e) => {
                            if (link.classList.contains('full')) {
                                return;
                            }
                            e.preventDefault();
                            link.classList.toggle('full');
                        });

                        const divider = document.createElement('div');
                        divider.className = 'link-divider';
                        languageMap[languageOption].appendChild(divider);

                        linkItem.appendChild(link);
                        languageMap[languageOption].appendChild(linkItem);
                    });

                    document.addEventListener('click', (event) => {
                        const expandedLinks = document.querySelectorAll('.link-item a.full');
                        expandedLinks.forEach(link => {
                            if (!link.contains(event.target)) {
                                link.classList.remove('full');
                            }
                        });
                    });

                    loader.style.display = 'none'; // Hide the loader
                } catch (error) {
                    loader.style.display = 'none'; // Hide the loader
                    errorMessage.style.display = 'block'; // Show the error message
                }
            });
        </script>
</body>

</html>
